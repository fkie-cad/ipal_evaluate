from ray import tune

# Configure how the IIDS is evaluated and tuned
config = {
    "name": "Testconfig",
    "seed": 1234,
    "num_samples": 4,
    "cpus_per_trial": 1,
    "gpus_per_trial": 0,
    "train_file": "train.ipal",
    "combiner_file": "train-combiner.ipal",
    "test_files": ["test.ipal"],
    "attack_file": "attacks.json",
    "file_type": "state",
    "is_timed_dataset": True,
    "extend_alarms": False,
    "keep_output": False,
    "plot_alerts": True,
    "plot_alerts_arguments": "",
    "metric": "F1",
    "mode": "max",
}


def postprocess(config):
    return config


# Configure the IIDS and the combiner
parameters = {
    # put IIDS config here and define tunable hyperparameters with, e.g.:
    "iids": {
        "MinMax": {
            "_type": "MinMax",
            "model-file": "MinMax",
            "features": [
                "state;1",
                "state;2",
                "state;3",
                "state;4",
                "state;5",
                "state;6",
                "state;7",
                "state;8",
                "state;9",
                "state;10",
                "state;11",
                "state;12",
                "state;13",
                "state;14",
                "state;15",
                "state;16",
                "state;17",
                "state;18",
                "state;19",
                "state;20",
                "state;21",
                "state;22",
                "state;23",
                "state;24",
                "state;25",
                "state;26",
                "state;27",
                "state;28",
                "state;29",
                "state;30",
                "state;31",
                "state;32",
                "state;33",
                "state;34",
                "state;35",
                "state;36",
                "state;37",
                "state;38",
                "state;39",
                "state;40",
                "state;41",
            ],
            "preprocessors": [],
            "allow-none": False,
            "save-training": None,
            "trainon": 1.0,
            "threshold": 1.0,
        },
        "Gradient": {
            "_type": "MinMax",
            "model-file": "Gradient",
            "features": [
                "state;1",
                "state;2",
                "state;3",
                "state;4",
                "state;5",
                "state;6",
                "state;7",
                "state;8",
                "state;9",
                "state;10",
                "state;11",
                "state;12",
                "state;13",
                "state;14",
                "state;15",
                "state;16",
                "state;17",
                "state;18",
                "state;19",
                "state;20",
                "state;21",
                "state;22",
                "state;23",
                "state;24",
                "state;25",
                "state;26",
                "state;27",
                "state;28",
                "state;29",
                "state;30",
                "state;31",
                "state;32",
                "state;33",
                "state;34",
                "state;35",
                "state;36",
                "state;37",
                "state;38",
                "state;39",
                "state;40",
                "state;41",
            ],
            "preprocessors": [
                {
                    "method": "Gradient",
                    "features": [
                        "state;1",
                        "state;2",
                        "state;3",
                        "state;4",
                        "state;5",
                        "state;6",
                        "state;7",
                        "state;8",
                        "state;9",
                        "state;10",
                        "state;11",
                        "state;12",
                        "state;13",
                        "state;14",
                        "state;15",
                        "state;16",
                        "state;17",
                        "state;18",
                        "state;19",
                        "state;20",
                        "state;21",
                        "state;22",
                        "state;23",
                        "state;24",
                        "state;25",
                        "state;26",
                        "state;27",
                        "state;28",
                        "state;29",
                        "state;30",
                        "state;31",
                        "state;32",
                        "state;33",
                        "state;34",
                        "state;35",
                        "state;36",
                        "state;37",
                        "state;38",
                        "state;39",
                        "state;40",
                        "state;41",
                    ],
                }
            ],
            "allow-none": False,
            "save-training": None,
            "trainon": 1.0,
            "threshold": 1.0,
        },
        "Exists": {
            "_type": "ExistsIDS",
            "model-file": "Exists",
            "threshold": 10.0,
        },
    },
    "combiner": {
        "_type": "Matrix",
        "model-file": "model-combiner",
        "use_scores": False,
        "keys": ["MinMax", "Gradient", "Exists"],
        "matrix": [
            [tune.uniform(0, 1)],
            [tune.uniform(0, 1)],
            [tune.uniform(0, 1)],
        ],
        "threshold": tune.uniform(0, 1),
    },
    "_postprocess": postprocess,
}

search_alg = tune.search.BasicVariantGenerator()

reporter = tune.CLIReporter(
    max_progress_rows=15,
    max_column_length=80,
    sort_by_metric=True,
    parameter_columns={
        "combiner/matrix": "matrix",
        "combiner/threshold": "threshold",
    },
    max_report_frequency=3600,
)
reporter.add_metric_column(config["metric"])
